# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QThread
import time
from cooling.modbusTCP import read_input_register_moxa_2
import logging
from config.config import siemens_ip, rack_0, slot
import snap7
from pymodbus.exceptions import ConnectionException
from siemens.connect_siemens import read_pbs_siemens, connect_siemens_test

logger = logging.getLogger(__name__)

'''
    база для потока (поток для копии)
    происходит проверка температуры при инициализации программы в первый раз, а потом каждые 10 секунд
'''
# todo реализовать чтение с сименса и овена в потоке, и реализовать лейбел готовности работы системы
# todo по лейблу готовности будет управляться вся система. внести в постоянный поток


class Thread(QThread):
    def __init__(self, label_temp_green_red, label_plc_green_red, label_pressure_2_green_red):
        super().__init__()
        self.label_pressure_2_green_red = label_pressure_2_green_red
        self.label_temp_green_red = label_temp_green_red
        self.label_plc_green_red = label_plc_green_red

    def run(self):
        """
        что тут исправил и все заработало)
        ConnectionException - ошибка уровнем выше
        # todo надо почистить комментарии на правильные
        :return:
        """
        while True:
            # чтение температуры с MOXA
            try:
                temp = read_input_register_moxa_2() # запоминание данных температуры
                try: # при отключенной MOXA крашится программв, данная обработка ошибок ничего не несет в себе, но с ней не каршится
                    # перевод в int для адекватной работы. крашилось, при отсутсвии MOXA падает какой-то не известный тип данных и крашит программу
                    if int(temp) < 450:  # проверка на температуру во внутри канала
                        self.label_temp_green_red.setText("Температура {}".format(temp))
                        self.label_temp_green_red.setStyleSheet("background-color: green")
                    else:
                        self.label_temp_green_red.setText("Внимание! Высокая температура")
                        self.label_temp_green_red.setStyleSheet("background-color: red")
                except Exception: # вывод какого-то не понятного типа данных при отключенной moxa, ничего критичного тут нет, все работает
                    # при обычной работе этих ошибок не будет, на результат работы не влияет
                    self.label_temp_green_red.setText("Соединение с MOXA1260 не установленно!")
                    self.label_temp_green_red.setStyleSheet("background-color: red")
            except ConnectionException: # Ничего не надо делать при этом исключении, была проверка на него в нчале функции
                pass

            # чтение данных из сименса


            # todo разобраться что тут происходт и вызывать отсюда значение давления PBS из siemens
            #try:
               # plc = snap7.client.Client()
            test_conn = connect_siemens_test()
            #plc.connect(siemens_ip, rack_0, slot)
            if test_conn == 1:
                self.label_plc_green_red.setText("Соединение с Siemens установленно")
                self.label_plc_green_red.setStyleSheet("background-color: green")
            else:
                self.label_plc_green_red.setText("Соединение с Siemens не установленно!")
                self.label_plc_green_red.setStyleSheet("background-color: red")
           # print('tyt')

            data = read_pbs_siemens()
            #print('or tyt')
            if data < 0.5:
                print('vot tyt')
                self.label_pressure_2_green_red.setText(f"{data}")
                self.label_pressure_2_green_red.setStyleSheet("background-color: green")
            else:
                print('zdec')
                self.label_pressure_2_green_red.setText(f"{data}")
                self.label_pressure_2_green_red.setStyleSheet("background-color: red")

            # except Exception as err:
            #     logger.warning(f'{err}')

            # finally:
            #     plc.disconnect()
            #     plc.destroy()


            time.sleep(10)



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(550, 270)
        # icon = QtGui.QIcon('../img/main_icon.svg')
        # icon.addPixmap(QtGui.QPixmap("../img/main_icon.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        # MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_open_control = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_open_control.setGeometry(QtCore.QRect(270, 220, 90, 30))
        self.pushButton_open_control.setObjectName("pushButton_open_control")
        self.gridFrame_diagnostics = QtWidgets.QFrame(parent=self.centralwidget)
        self.gridFrame_diagnostics.setGeometry(QtCore.QRect(10, 10, 530, 190))
        self.gridFrame_diagnostics.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.gridFrame_diagnostics.setLineWidth(2)
        self.gridFrame_diagnostics.setObjectName("gridFrame_diagnostics")
        self.gridLayout = QtWidgets.QGridLayout(self.gridFrame_diagnostics)
        self.gridLayout.setContentsMargins(5, 5, 5, 5)
        self.gridLayout.setObjectName("gridLayout")
        self.label_diagnostics = QtWidgets.QLabel(parent=self.gridFrame_diagnostics)
        self.label_diagnostics.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.label_diagnostics.setObjectName("label_diagnostics")
        self.gridLayout.addWidget(self.label_diagnostics, 0, 0, 1, 1)
        self.label_ready = QtWidgets.QLabel(parent=self.gridFrame_diagnostics)
        self.label_ready.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_ready.setObjectName("label_ready")
        self.gridLayout.addWidget(self.label_ready, 3, 0, 1, 1)
        self.gridFrame_devices = QtWidgets.QFrame(parent=self.gridFrame_diagnostics)
        self.gridFrame_devices.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.gridFrame_devices.setLineWidth(2)
        self.gridFrame_devices.setObjectName("gridFrame_devices")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridFrame_devices)
        self.gridLayout_2.setContentsMargins(5, 5, 5, 5)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_pressure_1_oven_green_red = QtWidgets.QLabel(parent=self.gridFrame_devices)
        self.label_pressure_1_oven_green_red.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_pressure_1_oven_green_red.setObjectName("label_pressure_1_oven_green_red")
        self.gridLayout_2.addWidget(self.label_pressure_1_oven_green_red, 2, 0, 1, 1)
        self.label_temp_green_red = QtWidgets.QLabel(parent=self.gridFrame_devices)
        self.label_temp_green_red.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_temp_green_red.setObjectName("label_temp_green_red")
        self.gridLayout_2.addWidget(self.label_temp_green_red, 1, 1, 1, 1)
        self.label_pressure_2_green_red = QtWidgets.QLabel(parent=self.gridFrame_devices)
        self.label_pressure_2_green_red.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_pressure_2_green_red.setObjectName("label_pressure_2_green_red")
        self.gridLayout_2.addWidget(self.label_pressure_2_green_red, 2, 1, 1, 1)
        self.label_plc_green_red = QtWidgets.QLabel(parent=self.gridFrame_devices)
        self.label_plc_green_red.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.label_plc_green_red.setObjectName("label_plc_green_red")
        self.gridLayout_2.addWidget(self.label_plc_green_red, 1, 0, 1, 1)
        self.gridLayout.addWidget(self.gridFrame_devices, 1, 0, 2, 1)
        self.pushButton_open_scheme = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_open_scheme.setGeometry(QtCore.QRect(10, 220, 100, 30))
        self.pushButton_open_scheme.setObjectName("pushButton_open_scheme")
        self.pushButton_open_cooling = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_open_cooling.setGeometry(QtCore.QRect(120, 220, 140, 30))
        self.pushButton_open_cooling.setObjectName("pushButton_open_cooling")
        self.pushButton_close = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_close.setGeometry(QtCore.QRect(370, 220, 65, 30))
        self.pushButton_close.setObjectName("pushButton_close")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        '''
         тестирование подключений на главном экране
         тестирование происходит перед стартом каждого цикла
        '''
        # Запуск потока для обновления онформации
        self.Thread_is = Thread(label_temp_green_red=self.label_temp_green_red,
                                label_plc_green_red=self.label_plc_green_red,
                                label_pressure_2_green_red=self.label_pressure_2_green_red)
        self.Thread_is.start()



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "INNA"))
        self.pushButton_open_control.setText(_translate("MainWindow", "Управление"))
        self.label_diagnostics.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\""
                                                                " font-weight:600;\">Диагностика</span></p></body>"
                                                                "</html>"))
        self.label_ready.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" "
                                                          "font-weight:600;\">Готовность(зелкрас)</span></p></body>"
                                                          "</html>"))
        self.label_pressure_1_oven_green_red.setText(_translate("MainWindow", "Давление 1 овен (зелкрас)"))
        self.label_temp_green_red.setText(_translate("MainWindow", "Температура moxa(данные)"))
        self.label_pressure_2_green_red.setText(_translate("MainWindow", "Давление 2 siemens (зелкрас)"))
        self.label_plc_green_red.setText(_translate("MainWindow", "Связь с ПЛК(зелкрас)"))
        self.pushButton_open_scheme.setText(_translate("MainWindow", "Мнемосхема"))
        self.pushButton_open_cooling.setText(_translate("MainWindow", "Система охлождения"))
        self.pushButton_close.setText(_translate("MainWindow", "Выход"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
